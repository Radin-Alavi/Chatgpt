import chess
import chess.engine
import os

# Path to Stockfish executable
STOCKFISH_PATH = r"stockfish-windows-x86-64-avx2.exe"

# Dictionary for piece symbols
PIECE_SYMBOLS = {
    'p': '♙', 'r': '♖', 'n': '♘', 'b': '♗', 'q': '♕', 'k': '♔',  # black pieces
    'P': '♟', 'R': '♜', 'N': '♞', 'B': '♝', 'Q': '♛', 'K': '♚'   # white pieces
}

# Display the chess board with coordinates and custom symbols
def display_board_with_coordinates(board):
    print("\n  a b c d e f g h")
    board_str = str(board).split('\n')
    for idx, line in enumerate(board_str):
        # Replace standard letters with custom symbols
        line_with_symbols = ''.join(PIECE_SYMBOLS.get(char, char) for char in line)
        print(f"{8 - idx} {line_with_symbols} {8 - idx}")
    print("  a b c d e f g h\n")

# Play function with error handling
def play_with_stockfish():
    if not os.path.exists(STOCKFISH_PATH):
        print("Stockfish executable not found. Please check the path.")
        return

    # Initialize chess board
    board = chess.Board()

    # Ask user to choose color
    color = None
    while color not in ["white", "black"]:
        color = input("Choose your color (type 'white' or 'black'): ").lower()

    # Run game
    try:
        with chess.engine.SimpleEngine.popen_uci(STOCKFISH_PATH) as engine:
            if color == "black":
                print("Stockfish will play both sides.")
                # Stockfish vs Stockfish
                while not board.is_game_over():
                    display_board_with_coordinates(board)
                    result = engine.play(board, chess.engine.Limit(time=1.0))
                    
                    # Ensure the move is legal
                    if result.move in board.legal_moves:
                        board.push(result.move)
                        # Printing move using UCI format to avoid AssertionError in SAN
                        print(f"Stockfish played {result.move.uci()}.\n")
                    else:
                        print(f"Illegal move generated by Stockfish: {result.move}")
                        break  # Stop if an illegal move is detected

            elif color == "white":
                # User plays as white
                while not board.is_game_over():
                    display_board_with_coordinates(board)

                    # User's move in SAN format
                    user_move = input("Enter your move in SAN (e.g., Nf3, e4, O-O): ")
                    try:
                        move = board.parse_san(user_move)
                        if move in board.legal_moves:
                            board.push(move)
                        else:
                            print("Illegal move. Try again.")
                            continue
                    except ValueError:
                        print("Invalid move format. Please use SAN notation and try again.")
                        continue

                    # Check if game is over after user's move
                    if board.is_game_over():
                        break

                    # Stockfish's move
                    result = engine.play(board, chess.engine.Limit(time=1.0))
                    
                    # Ensure the move is legal
                    if result.move in board.legal_moves:
                        board.push(result.move)
                        # Printing move using UCI format to avoid AssertionError in SAN
                        print(f"Stockfish played {result.move.uci()}.\n")
                    else:
                        print(f"Illegal move generated by Stockfish: {result.move}")
                        break  # Stop if an illegal move is detected

            # Game over
            print("Game over!")
            print("Result:", board.result())

    except PermissionError as e:
        print("Permission error: Ensure Stockfish executable has proper permissions.")
        print("Error details:", e)

# Run the play function
play_with_stockfish()